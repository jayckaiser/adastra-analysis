settings:

  # Specify the path to the unzipped Adastra folder.
  adastra_dir: /home/jayckaiser/adastra/Adastra-17-linux

  # Specify where the 'adastra' JSONL datasets are stored.
  data_dir: /home/jayckaiser/adastra/data

  # Specify where the plots should be saved.
  analytics_dir: /home/jayckaiser/adastra/analytics

  # Specify whether the 'adastra.json' or 'adastra_nlp.json' dataset is used here.
  dataset: adastra


# Define additional datasets not present in the main data.
# - These must have a 'columns' key and a dictionary structure under the 'data' key.
datasets:
  # Define a custom set of characters to filter on, as well as the colors to display them with.
  characters:
    columns: [speaker, color]
    data: &characters_palette
      alexios : '#65ca68'
      amicus  : '#ff3333'
      cassius : '#FFFFFF'  # '#ffffff' 
      cato    : '#7a7a7a'
      marco   : '#0000FF'  # '#FFFFFF'
      neferu  : '#ffcc00'
      virginia: '#8e389c'


analytics:
  # Define universal plot params here. They can be overwritten in any plot below.
  plot_args:
    hue: speaker
    kind: line
    palette: *characters_palette
    
  # Create one plot per image.
  plots:
    lines_per_character:
      plot_args:
        x: file
        y: num_lines
      sql: >
          select
              file,
              speaker,
              count(*) as num_lines
          from adastra
          inner join characters using(speaker)
          group by 1, 2
          order by 1, 2
    
    proportion_lines_per_character:
      plot_args:
        x: file
        y: proportion_lines
      sql: >
          select
              file,
              speaker,
              count(*) / num_lines_by_file as proportion_lines
          from adastra
              inner join characters using(speaker)
              inner join (
                  select
                      file,
                      cast(count(*) as float) as num_lines_by_file
                  from adastra
                  group by 1
              ) using(file)
          group by 1, 2
          order by 1, 2

    words_per_character:
      plot_args:
        x: file
        y: num_words
      sql: >
          select
              file,
              speaker,
              sum(num_words) as num_words
          from adastra_nlp
          inner join characters using(speaker)
          group by 1, 2
          order by 1, 2
      

    proportion_words_per_character:
      plot_args:
        x: file
        y: proportion_words
      sql: >
          select
              file,
              speaker,
              sum(num_words) / num_words_by_file as proportion_words
          from adastra_nlp
              inner join characters using(speaker)
              inner join (
                  select
                      file,
                      cast(sum(num_words) as float) as num_words_by_file
                  from adastra_nlp
                  group by 1
              ) using(file)
          group by 1, 2
          order by 1, 2

    average_sentiment_per_character:
      plot_args:
        x: file
        y: avg_sentiment
      axhline: 0.0
      sql: >
          select
              file,
              speaker,
              avg(sentiment) as avg_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          group by 1, 2
          order by 1, 2

    # Sentiment graphs, one per file.
    sentiment/a1s1:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a1s1'

    sentiment/a1s2:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a1s2'

    sentiment/a1s3:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a1s3'

    sentiment/a1s4:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a1s4'

    sentiment/a1s5:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a1s5'

    sentiment/a1s6:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a1s6'

    sentiment/a1s7:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a1s7'

    sentiment/a2s1:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a2s1'

    sentiment/a2s2:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a2s2'

    sentiment/a2s3:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a2s3'

    sentiment/a3s1:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a3s1'

    sentiment/a3s2:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'a3s2'

    sentiment/end_game1:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'end_game1'

    sentiment/end_game2:
      plot_args:
        x: line_idx
        y: rolling_sentiment
      axhline: 0.0
      remove_outliers: True
      sql: >
          select
              line_idx,
              speaker,
              avg(sentiment) over (
                  partition by speaker
                  order by line_idx
                  rows between 9 preceding and current row
              ) as rolling_sentiment
          from adastra_nlp
              inner join characters using(speaker)
          where file = 'end_game2'
