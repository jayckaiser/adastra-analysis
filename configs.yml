# Main parameters that affect the run of the script.
configs:

  # Specify the path to the unzipped Adastra folder.
  adastra_directory: /home/jayckaiser/adastra/Adastra-17-linux

  # Specify where the 'adastra' JSONL dataset(s) are stored.
  data_directory: /home/jayckaiser/adastra/data

  # Complete NLP processing.
  # (This is not required for any script, but extends potential functionality.)
  use_nlp: True



adastra_analytics:
  # Define additional datasets not present in the main data.
  # These must be dictionaries. Define the `columns` and the `data`.
  # - These must have a 'columns' key and a dictionary structure under the 'data' key.
  datasets:

    # Define a custom set of characters to filter on, as well as the colors to display them with.
    characters:
      columns: [speaker, color]
      data: &characters_palette  # Pass this dictionary to `analytics` as well.
        alexios : '#65ca68'
        amicus  : '#ff3333'
        cassius : '#FFFFFF'  # '#ffffff' 
        cato    : '#7a7a7a'
        marco   : '#0000FF'  # '#FFFFFF'
        neferu  : '#ffcc00'
        virginia: '#8e389c'


  # Define SQL queries potentially used across multiple scripts.
  # (These are only passed around the yaml file, not used in Python.)
  predefined_queries:
    rolling_sentiment: &rolling_sentiment >
        select
            line_idx,
            speaker,
            avg(sentiment) over (
                partition by speaker
                order by line_idx
                rows between 9 preceding and current row
            ) as rolling_sentiment
        from adastra
            inner join characters using(speaker)



  # Run `queries.py` to run SQL queries and save outputs to JSONL files.
  queries:

    # Specify where the queries output should be saved.
    output_dir: /home/jayckaiser/adastra/queries

    # Provide the dataset alias used in all query scripts.
    dataset_alias: adastra

    # Define a where-clause to apply before every query.
    where: 'is_read is True'

    # Create one output per key.
    files:

      lines_per_file:
        sql: >
            select
              file,
              count(*) as num_lines
            from adastra
            group by 1
            order by 1

      lines_per_speaker:
        sql: >
            select
              speaker,
              count(*) as num_lines
            from adastra
            group by 1
            order by 1

      words_per_file:
        sql: >
            select
              file,
              sum(num_words) as sum_words
            from adastra
            group by 1
            order by 1

      words_per_speaker:
        sql: >
            select
              speaker,
              sum(num_words) as sum_words
            from adastra
            group by 1
            order by 1

      total_lines:
        sql: >
            select
              count(*) as total_words
            from adastra

      total_words:
        sql: >
            select
              sum(num_words) as total_words
            from adastra




  # Run `analytics.py` to run SQL queries to create Seaborn relplots .
  analytics:

    # Specify where the plots should be saved.
    output_dir : /home/jayckaiser/adastra/analytics

    # Provide the dataset alias used in all query scripts.
    dataset_alias: adastra

    # Define a where-clause to apply before every query.
    where: 'is_read is True'

    # Define universal plot params here. They can be overwritten in any plot below.
    plot_args:
      hue: speaker
      kind: line
      palette: *characters_palette
      
    # Create one plot per key.
    plots:

      lines_per_character:
        plot_args:
          x: file
          y: num_lines
        sql: >
            select
                file,
                speaker,
                count(*) as num_lines
            from adastra
            inner join characters using(speaker)
            group by 1, 2
            order by 1, 2
      
      proportion_lines_per_character:
        plot_args:
          x: file
          y: proportion_lines
        sql: >
            select
                file,
                speaker,
                count(*) / num_lines_by_file as proportion_lines
            from adastra
                inner join characters using(speaker)
                inner join (
                    select
                        file,
                        cast(count(*) as float) as num_lines_by_file
                    from adastra
                    group by 1
                ) using(file)
            group by 1, 2
            order by 1, 2

      words_per_character:
        plot_args:
          x: file
          y: num_words
        sql: >
            select
                file,
                speaker,
                sum(num_words) as num_words
            from adastra
            inner join characters using(speaker)
            group by 1, 2
            order by 1, 2
        

      proportion_words_per_character:
        plot_args:
          x: file
          y: proportion_words
        sql: >
            select
                file,
                speaker,
                sum(num_words) / num_words_by_file as proportion_words
            from adastra_nlp
                inner join characters using(speaker)
                inner join (
                    select
                        file,
                        cast(sum(num_words) as float) as num_words_by_file
                    from adastra
                    group by 1
                ) using(file)
            group by 1, 2
            order by 1, 2

        average_sentiment_per_character:
          plot_args:
            x: file
            y: avg_sentiment
          axhline: 0.0
          sql: >
              select
                  file,
                  speaker,
                  avg(sentiment) as avg_sentiment
              from adastra
                  inner join characters using(speaker)
              group by 1, 2
              order by 1, 2

        # Sentiment graphs, one per file.
        sentiment/a1s1:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a1s1'"
          sql: *rolling_sentiment

        sentiment/a1s2:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a1s2'"
          sql: *rolling_sentiment

        sentiment/a1s3:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a1s3'"
          sql: *rolling_sentiment

        sentiment/a1s4:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a1s4'"
          sql: *rolling_sentiment

        sentiment/a1s5:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a1s5'"
          sql: *rolling_sentiment

        sentiment/a1s6:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a1s6'"
          sql: *rolling_sentiment

        sentiment/a1s7:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a1s7'"
          sql: *rolling_sentiment

        sentiment/a2s1:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a2s1'"
          sql: *rolling_sentiment

        sentiment/a2s2:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a2s2'"
          sql: *rolling_sentiment

        sentiment/a2s3:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a2s3'"
          sql: *rolling_sentiment

        sentiment/a3s1:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a3s1'"
          sql: *rolling_sentiment

        sentiment/a3s2:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'a3s2'"
          sql: *rolling_sentiment

        sentiment/end_game1:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'end_game1'"
          sql: *rolling_sentiment

        sentiment/end_game2:
          plot_args:
            x: line_idx
            y: rolling_sentiment
          axhline: 0.0
          remove_outliers: True
          where: "file = 'end_game2'"
          sql: *rolling_sentiment





  # Run `wordclouds.py` to create TF-IDF wordclouds using custom filters. 
  wordclouds:

    # Specify where the wordclouds should be saved.
    output_dir: /home/jayckaiser/adastra/wordclouds

    # Define a where-clause to apply before every query.
    where: 'is_read is True'

    # Specify which column in the dataframe will be used to populate the wordclouds.
    # - List columns are automatically joined before processing.
    # - Good options are 'line', 'words', or 'content_words'.
    #   * 'line' is the cleaned text of the line.
    #   * 'words' removes punctuation.
    #   * 'content_words' removes punctuation and stop-words, and converts to lowercase.
    use_column: content_words

    # Define universal wordcloud params here. They can be overwritten in any image below.
    wordcloud_args:
      max_words: 2000
      max_font_size: 40
      mode: RBG
      background_color: black
      repeat: True
      relative_scaling: 0.5
      random_state: 42

    # Create one wordcloud per image.
    # - By default, the key is the name of both the input and output image.
    #   (If the input image is different, specify a 'file' subkey.)
    images:

      # Alexios
      sprites/alexios/alexios:
        where: "speaker = 'alexios'"
      sprites/alexios/alexios-vshocked-e:
        where: "speaker = 'alexios'"
      sprites/alexios/alexios-shocked:
        where: "speaker = 'alexios'"
      sprites/alexios/alexios-embarrassed:
        where: "speaker = 'alexios'"
      sprites/alexios/alexios-angry-e-u:
        where: "speaker = 'alexios'"

      # Amicus
      sprites/amicus/amicus:
        where: "speaker = 'amicus'"
      sprites/amicus/amicus-tears:
        where: "speaker = 'amicus'"
      sprites/amicus/amicus-smile:
        where: "speaker = 'amicus'"
      sprites/amicus/amicus-shocked:
        where: "speaker = 'amicus'"
      sprites/amicus/amicus-crossed-serious:
        where: "speaker = 'amicus'"
      sprites/amicus/amicus-angry-n:
        where: "speaker = 'amicus'"
      illustrations/sleep:
        where: "speaker = 'amicus'"
      illustrations/amicusend:
        where: "speaker = 'amicus'"
      illustrations/introspection:
        where: "speaker = 'amicus'"
      illustrations/dinner1:
        where: "speaker = 'amicus'"
      illustrations/dinner2:
        where: "speaker = 'amicus'"
      illustrations/dinner3:
        where: "speaker = 'amicus'"
      illustrations/dinner4:
        where: "speaker = 'amicus'"

      # Cassius
      sprites/cassius/cassius:
        where: "speaker = 'cassius'"
      sprites/cassius/cassius-angry-u:
        where: "speaker = 'cassius'"
      sprites/cassius/cassius-paw:
        where: "speaker = 'cassius'"
      sprites/cassius/cassius-furious:
        where: "speaker = 'cassius'"
      sprites/cassius/cassius-disappointed-u:
        where: "speaker = 'cassius'"

      # Cato
      sprites/cato/cato:
        where: "speaker = 'cato'"
      sprites/cato/cato-bow-v:
        where: "speaker = 'cato'"
      sprites/cato/cato-angry-u:
        where: "speaker = 'cato'"

      # Neferu
      sprites/neferu/neferu:
        where: "speaker = 'neferu'"
      sprites/neferu/neferu-wink-f:
        where: "speaker = 'neferu'"
      sprites/neferu/neferu-talking-n:
        where: "speaker = 'neferu'"
      sprites/neferu/neferu-talking-a:
        where: "speaker = 'neferu'"
      sprites/neferu/neferu-silly-f-n:
        where: "speaker = 'neferu'"
      sprites/neferu/neferu-shocked:
        where: "speaker = 'neferu'"
      sprites/neferu/neferu-fury:
        where: "speaker = 'neferu'"

      # Virginia
      sprites/virginia/virginia:
        where: "speaker = 'virginia'"
      sprites/virginia/virginia-tilt-p:
        where: "speaker = 'virginia'"
      sprites/virginia/virginia-annoyed:
        where: "speaker = 'virginia'"
      illustrations/archives1:
        where: "speaker = 'virginia'"

      # Meera 
      illustrations/meera:
        where: "speaker = 'meera'"

      # Monitor
      illustrations/monitor:
        where: "speaker == 'monitor'"

      # Cassius and Alexios
      illustrations/poisoned:
        where: "speaker IN ('cassius', 'alexios')"
      illustrations/alexandcassius:
        where: "speaker IN ('cassius', 'alexios')"
      illustrations/alexandcassiuskiss:
        where: "speaker IN ('cassius', 'alexios')"

      # Cato and Neferu
      illustrations/nefandcat1:
        where: "speaker IN ('cato', 'neferu')"
      illustrations/nefandcat2:
        where: "speaker IN ('cato', 'neferu')"

      # Amicus and Neferu
      illustrations/amicusandneferu1:
        where: "speaker IN ('amicus', 'neferu')"
      illustrations/amicusandneferu2:
        where: "speaker IN ('amicus', 'neferu')"
      illustrations/amicusandneferu3:
        where: "speaker IN ('amicus', 'neferu')"
      illustrations/backoff2:
        where: "speaker IN ('amicus', 'neferu')"
      illustrations/backoff3:
        where: "speaker IN ('amicus', 'neferu')"

      # All text
      illustrations/adastra:
        where: "speaker IS NOT NULL"
      illustrations/Adastranl:
        where: "speaker IS NOT NULL"

      # Amicus and Marco in end-game
      illustrations/farewell1:
        where: "file = 'end_game1' AND speaker IN ('amicus', 'marco')"
      illustrations/farewell3:
        where: "file = 'end_game1' AND speaker IN ('amicus', 'marco')"
      illustrations/wemadeit1:
        where: "file = 'end_game1' AND speaker IN ('amicus', 'marco')"
      illustrations/wemadeit4:
        where: "file = 'end_game1' AND speaker IN ('amicus', 'marco')"

      # In Act 3 Scene 2
      illustrations/lastmoment:
        where: "file = 'a3s2'"

      # Amicus & Internal Narration & Monitor in Act 3 Scene 2
      # (This could be better filtered by line number.)
      illustrations/finalspace:
        where: "file = 'a3s2' AND speaker IN ('amicus', 'internal', 'monitor')"
        wordcloud_args:
          background_color: white
      illustrations/finalspace2:
        where: "file = 'a3s2' AND speaker IN ('amicus', 'internal', 'monitor')"
        wordcloud_args:
          background_color: white
      illustrations/watching:
        where: "file = 'a3s2' AND speaker IN ('amicus', 'internal', 'monitor')"
        wordcloud_args:
          background_color: white

      # Amicus & Marco & Internal Narration in optional paths ;)
      illustrations/amiscene1:
        where: "speaker IN ('amicus', 'marco', 'internal') AND is_optional"
        wordcloud_args:
          background_color: white
      illustrations/amiscene3:
        where: "speaker IN ('amicus', 'marco', 'internal') AND is_optional"
        wordcloud_args:
          background_color: white
      illustrations/ss1:
        where: "speaker IN ('amicus', 'marco', 'internal') AND is_optional"
        wordcloud_args:
          background_color: white
      illustrations/ss3:
        where: "speaker IN ('amicus', 'marco', 'internal') AND is_optional"
        wordcloud_args:
          background_color: white
      illustrations/2ss:
        where: "speaker IN ('amicus', 'marco', 'internal') AND is_optional"
        wordcloud_args:
          background_color: white
      illustrations/2ss3:
        where: "speaker IN ('amicus', 'marco', 'internal') AND is_optional"
        wordcloud_args:
          background_color: white
